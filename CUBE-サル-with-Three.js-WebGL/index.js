// Generated by CoffeeScript 1.4.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  (function(win, doc) {
    var Main,
      _this = this;
    Main = (function() {

      function Main() {
        this.init = __bind(this.init, this);

        this.rendering = __bind(this.rendering, this);

        this.mouse_events = __bind(this.mouse_events, this);
        this.scene_W = 465;
        this.scene_H = 465;
        this.scene = new THREE.Scene();
      }

      Main.prototype.mouse_events = function() {
        var data, mousedown_handler, mousemove_handler, mouseup_handler, move, release, reset,
          _this = this;
        data = {};
        reset = function() {
          clearInterval(data.release_timer);
          return data = {
            from_X: false,
            from_Y: false,
            move_X: 0,
            move_Y: 0,
            release_timer: 0
          };
        };
        move = function(event) {
          var from_X, from_Y, page_X, page_Y;
          from_X = data.from_X;
          from_Y = data.from_Y;
          page_X = event.pageX;
          page_Y = event.pageY;
          data.move_X = from_X ? from_X - page_X : 0;
          data.move_Y = from_Y ? from_Y - page_Y : 0;
          _this.rote_X += data.move_Y * -0.02;
          _this.rote_Y += data.move_X * -0.02;
          data.from_X = page_X;
          return data.from_Y = page_Y;
        };
        release = function() {
          var _ref, _ref1;
          data.move_X *= 0.9;
          data.move_Y *= 0.9;
          _this.rote_X += data.move_Y * -0.02;
          _this.rote_Y += data.move_X * -0.02;
          if ((-0.1 < (_ref = data.move_X) && _ref < 0.1) && (-0.1 < (_ref1 = data.move_Y) && _ref1 < 0.1)) {
            return reset();
          }
        };
        mousedown_handler = function() {
          reset();
          doc.body.addEventListener("mousemove", mousemove_handler, false);
          return doc.body.addEventListener("mouseup", mouseup_handler, false);
        };
        mousemove_handler = function(event) {
          return move(event);
        };
        mouseup_handler = function(event) {
          data.release_timer = setInterval(release, 30);
          doc.body.removeEventListener("mousemove", mousemove_handler, false);
          return doc.body.removeEventListener("mouseup", mouseup_handler, false);
        };
        return doc.querySelector("#stage_wrap canvas").addEventListener("mousedown", mousedown_handler, false);
      };

      Main.prototype.rendering = function() {
        this.cubeMesh.rotation.x = this.rote_X;
        this.cubeMesh.rotation.y = this.rote_Y;
        this.renderer.render(this.scene, this.camera);
        return setTimeout(this.rendering, 30);
      };

      Main.prototype.init = function() {
        var aspect, far, fov, geometry, material, materials, near;
        fov = 80;
        aspect = this.scene_W / this.scene_H;
        near = 1;
        far = 1000;
        this.camera = new THREE.PerspectiveCamera(fov, aspect, near, far);
        this.camera.position.z = 500;
        materials = [
          new THREE.MeshLambertMaterial({
            map: THREE.ImageUtils.loadTexture("http://jsrun.it/assets/2/N/A/0/2NA0j.png")
          }), new THREE.MeshLambertMaterial({
            map: THREE.ImageUtils.loadTexture("http://jsrun.it/assets/1/h/M/z/1hMzv.png")
          }), new THREE.MeshLambertMaterial({
            map: THREE.ImageUtils.loadTexture("http://jsrun.it/assets/n/z/w/l/nzwlI.png")
          }), new THREE.MeshLambertMaterial({
            map: THREE.ImageUtils.loadTexture("http://jsrun.it/assets/h/D/k/D/hDkDT.png")
          }), new THREE.MeshLambertMaterial({
            map: THREE.ImageUtils.loadTexture("http://jsrun.it/assets/A/1/9/W/A19WR.png")
          }), new THREE.MeshLambertMaterial({
            map: THREE.ImageUtils.loadTexture("http://jsrun.it/assets/r/t/c/d/rtcdI.png")
          })
        ];
        material = new THREE.MeshFaceMaterial(materials);
        geometry = new THREE.CubeGeometry(200, 200, 200);
        this.cubeMesh = new THREE.Mesh(geometry, material);
        this.scene.add(this.cubeMesh);
        this.cubeLight = new THREE.AmbientLight(0xffffff);
        this.cubeLight.position.z = 3;
        this.scene.add(this.cubeLight);
        this.renderer = new THREE.WebGLRenderer();
        this.renderer.setSize(this.scene_W, this.scene_H);
        doc.getElementById("stage_wrap").appendChild(this.renderer.domElement);
        this.mouse_events();
        this.rote_X = Math.PI * 0.7;
        this.rote_Y = Math.PI / 4;
        return this.rendering();
      };

      return Main;

    })();
    return win.addEventListener("load", function() {
      var main;
      main = new Main();
      return main.init();
    }, false);
  })(window, document);

}).call(this);
