// Generated by CoffeeScript 1.4.0
(function() {
  var Fireworks, Spark;

  Fireworks = (function() {

    function Fireworks() {}

    Fireworks.prototype.SPARK_NUM = 300;

    Fireworks.prototype.INTERVAL = 15;

    Fireworks.prototype.FIREWORKS_MAX = 3;

    Fireworks.prototype.sparks = [];

    Fireworks.prototype.intervalTimer = 0;

    Fireworks.prototype.is_length = false;

    Fireworks.prototype.fireworks_length = 0;

    Fireworks.prototype.loop = function() {
      var spark, update_sparks, _i, _len, _ref;
      update_sparks = [];
      _ref = this.sparks;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        spark = _ref[_i];
        if (spark.size > 0.3) {
          spark.update();
          update_sparks.push(spark);
        }
      }
      this.sparks = update_sparks;
      this.fireworks_length = this.sparks.length / this.SPARK_NUM | 0;
      this.context.clearRect(0, 0, this.stage_W, this.stage_H);
      this.context.globalCompositeOperation = "source-over";
      this.context.globalAlpha = 0.85;
      this.context.drawImage(this.canvas_before, 0, 0);
      this.draw_spark();
      this.context_before.clearRect(0, 0, this.stage_W, this.stage_H);
      this.context_before.drawImage(this.canvas, 0, 0);
      if (this.fireworks_length === 0) {
        clearInterval(this.intervalTimer);
        this.context.clearRect(0, 0, this.stage_W, this.stage_H);
        return this.context_before.clearRect(0, 0, this.stage_W, this.stage_H);
      }
    };

    Fireworks.prototype.draw_spark = function() {
      var spark, _i, _len, _ref, _results;
      this.context.globalCompositeOperation = "lighter";
      this.context.globalAlpha = 1;
      _ref = this.sparks;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        spark = _ref[_i];
        this.context.beginPath();
        this.context.arc(spark.positon_X, spark.positon_Y, spark.size, 0, Math.PI * 2, false);
        this.context.fillStyle = spark.color;
        _results.push(this.context.fill());
      }
      return _results;
    };

    Fireworks.prototype.create = function(start_X, start_Y) {
      var i, spark, _i, _ref,
        _this = this;
      if (this.fireworks_length >= this.FIREWORKS_MAX) {
        return;
      }
      for (i = _i = 0, _ref = this.SPARK_NUM; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        spark = new Spark;
        spark.init();
        spark.positon_X = start_X;
        spark.positon_Y = start_Y;
        this.sparks.push(spark);
      }
      if (this.fireworks_length === 0) {
        this.intervalTimer = setInterval(function() {
          return _this.loop();
        }, this.INTERVAL);
      }
      return this.fireworks_length += 1;
    };

    Fireworks.prototype.canvas_resize = function() {
      this.stage_W = window.innerWidth;
      this.stage_H = window.innerHeight;
      this.canvas.width = this.stage_W;
      this.canvas.height = this.stage_H;
      this.canvas_before.width = this.stage_W;
      return this.canvas_before.height = this.stage_H;
    };

    Fireworks.prototype.init = function() {
      var _this = this;
      this.canvas = document.getElementById("area");
      this.context = this.canvas.getContext("2d");
      this.canvas_before = document.createElement("canvas");
      this.context_before = this.canvas_before.getContext("2d");
      this.create(200, 200);
      document.addEventListener("mousedown", function(e) {
        return _this.create(e.pageX, e.pageY);
      }, false);
      document.addEventListener("touchstart", function(e) {
        return _this.create(e.touches[0].pageX, e.touches[0].pageY);
      }, false);
      window.addEventListener("resize", function() {
        return _this.canvas_resize();
      }, false);
      return this.canvas_resize();
    };

    return Fireworks;

  })();

  Spark = (function() {

    function Spark() {}

    Spark.prototype.SIZE = 2.5;

    Spark.prototype.COLOR = "rgba(255,220,100,1)";

    Spark.prototype.DECAY = 0.98;

    Spark.prototype.GRAVITY = 1.5;

    Spark.prototype.positon_X = 0;

    Spark.prototype.positon_Y = 0;

    Spark.prototype.init = function() {
      var angle, velocity;
      angle = Math.random() * (2 * Math.PI);
      angle = (angle * 5 | 0) / 5;
      velocity = Math.random() * 5.5;
      velocity = (velocity * 2 | 0) / 2;
      if (velocity > 4.5) {
        velocity = 4.5;
      }
      this.velocity_X = Math.cos(angle) * velocity;
      this.velocity_Y = Math.sin(angle) * velocity;
      this.color = this.COLOR;
      return this.size = this.SIZE;
    };

    Spark.prototype.update = function() {
      this.velocity_X *= this.DECAY;
      this.velocity_Y *= this.DECAY;
      this.size *= this.DECAY;
      this.positon_X += this.velocity_X;
      this.positon_Y += this.velocity_Y;
      return this.positon_Y += this.GRAVITY;
    };

    return Spark;

  })();

  window.addEventListener("load", function() {
    var fireworks;
    fireworks = new Fireworks;
    return fireworks.init();
  }, false);

}).call(this);
