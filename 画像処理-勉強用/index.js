// Generated by CoffeeScript 1.4.0
(function() {
  var _this = this;

  (function(win, doc) {
    var back_default, ctx, cvs, get_rgba, gray_scale, image, mosaic, nichika, set_rgba;
    cvs = doc.getElementById("stage");
    ctx = cvs.getContext("2d");
    image = new Image();
    image.src = "http://jsrun.it/assets/l/w/g/q/lwgqr.png";
    image.addEventListener("load", function() {
      var input;
      ctx.drawImage(image, 0, 0);
      input = ctx.getImageData(0, 0, image.width, image.height);
      return doc.getElementById("select_filter").addEventListener("change", function(event) {
        var value;
        value = event.target.options[event.target.options.selectedIndex].value;
        if (value === "default") {
          return back_default(input);
        } else if (value === "nichika") {
          return nichika(input.data);
        } else if (value === "gray_scale") {
          return gray_scale(input.data);
        } else if (value === "mosaic") {
          return mosaic(input);
        }
      }, false);
    }, false);
    back_default = function(input) {
      return ctx.putImageData(input, 0, 0);
    };
    nichika = function(input_data) {
      var b, g, i, max_val, output, output_data, r, val;
      output = ctx.createImageData(image.width, image.height);
      output_data = output.data;
      i = input_data.length;
      while (0 < i) {
        i -= 4;
        r = input_data[i];
        g = input_data[i + 1];
        b = input_data[i + 2];
        max_val = Math.max(r, g, b);
        val = max_val > 230 ? 255 : 0;
        output_data[i] = val;
        output_data[i + 1] = val;
        output_data[i + 2] = val;
        output_data[i + 3] = 255;
      }
      return ctx.putImageData(output, 0, 0);
    };
    gray_scale = function(input_data) {
      var b, g, i, max_val, min_val, output, output_data, r, val;
      output = ctx.createImageData(image.width, image.height);
      output_data = output.data;
      i = input_data.length;
      while (0 < i) {
        i -= 4;
        r = input_data[i];
        g = input_data[i + 1];
        b = input_data[i + 2];
        max_val = Math.max(r, g, b);
        min_val = Math.min(r, g, b);
        val = (max_val + min_val) / 2;
        output_data[i] = val;
        output_data[i + 1] = val;
        output_data[i + 2] = val;
        output_data[i + 3] = 255;
      }
      return ctx.putImageData(output, 0, 0);
    };
    mosaic = function(input) {
      var a, b, count, g, h, i, input_x, input_y, j, k, mosaic_x, mosaic_y, output, output_rgba, r, ratio, ratio2d, rgba, w, x, y, _i, _j;
      ratio = 15;
      w = Math.ceil(input.width / ratio);
      h = Math.ceil(input.height / ratio);
      output = ctx.createImageData(input.width, input.height);
      i = 0;
      ratio2d = ratio * ratio;
      while (i < (w * h)) {
        mosaic_x = i % w;
        mosaic_y = i / w | 0;
        input_x = mosaic_x * ratio;
        input_y = mosaic_y * ratio;
        r = 0;
        g = 0;
        b = 0;
        a = 0;
        count = 0;
        for (j = _i = 0; 0 <= ratio2d ? _i < ratio2d : _i > ratio2d; j = 0 <= ratio2d ? ++_i : --_i) {
          x = input_x + (j % ratio);
          y = input_y + (j / ratio | 0);
          rgba = get_rgba(input, x, y);
          if (rgba) {
            r += rgba.r;
            g += rgba.g;
            b += rgba.b;
            a += rgba.a;
            count += 1;
          }
        }
        output_rgba = {
          r: r / count,
          g: g / count,
          b: b / count,
          a: a / count
        };
        for (k = _j = 0; 0 <= ratio2d ? _j < ratio2d : _j > ratio2d; k = 0 <= ratio2d ? ++_j : --_j) {
          x = input_x + (k % ratio);
          y = input_y + (k / ratio | 0);
          output = set_rgba(output, x, y, output_rgba);
        }
        i += 1;
      }
      return ctx.putImageData(output, 0, 0);
    };
    get_rgba = function(input, x, y) {
      var target;
      if (x >= input.width || y >= input.height) {
        return false;
      }
      target = (input.width * y + x) * 4;
      return {
        r: input.data[target],
        g: input.data[target + 1],
        b: input.data[target + 2],
        a: input.data[target + 3]
      };
    };
    return set_rgba = function(output, x, y, rgba) {
      var target;
      if (x >= output.width || y >= output.height) {
        return output;
      }
      target = (output.width * y + x) * 4;
      output.data[target] = rgba.r;
      output.data[target + 1] = rgba.g;
      output.data[target + 2] = rgba.b;
      output.data[target + 3] = rgba.a;
      return output;
    };
  })(window, document);

}).call(this);
