// Generated by CoffeeScript 1.4.0
(function() {
  var _this = this,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  (function(win, doc) {
    var DEFAULT_RENDERER_TYPE, FPS, Fuyo, Main, POINT_NUM, POINT_SPEED, Point, central, central2d, clamp, ctx, cvs, cvs_H, cvs_W;
    cvs = doc.getElementById("c");
    ctx = cvs.getContext("2d");
    cvs.width = cvs_W = win.innerWidth;
    cvs.height = cvs_H = win.innerHeight;
    FPS = 60;
    POINT_NUM = 15;
    POINT_SPEED = 0.5;
    DEFAULT_RENDERER_TYPE = 0;
    clamp = function(min, max) {
      return Math.random() * (max - min) + min;
    };
    central = function(p1, p2) {
      return (p2 - p1) * 0.5 + p1;
    };
    central2d = function(p1, p2) {
      return {
        x: (p2.x - p1.x) * 0.5 + p1.x,
        y: (p2.y - p1.y) * 0.5 + p1.y
      };
    };
    Main = (function() {

      function Main() {
        _this.clear = __bind(_this.clear, this);

        _this.update = __bind(_this.update, this);

        _this.setup_update = __bind(_this.setup_update, this);

        _this.change_renderer = __bind(_this.change_renderer, this);

        _this.set_click_event = __bind(_this.set_click_event, this);
        this.fuyos = [new Fuyo("rgba(255,0,0,0.3)"), new Fuyo("rgba(0,255,0,0.3)"), new Fuyo("rgba(0,0,255,0.3)")];
        this.change_renderer(DEFAULT_RENDERER_TYPE);
        this.set_click_event();
        this.setup_update();
      }

      Main.prototype.set_click_event = function() {
        var is_touch,
          _this = this;
        is_touch = "ontouchstart" in win ? true : false;
        doc.addEventListener((is_touch ? "touchmove" : "mousemove"), function(event) {
          return event.preventDefault();
        }, false);
        return doc.addEventListener((is_touch ? "touchend" : "click"), function(event) {
          event.preventDefault();
          return _this.change_renderer();
        }, false);
      };

      Main.prototype.change_renderer = function(type) {
        var fuyo, _i, _len, _ref, _ref1;
        this.renderer_type = type != null ? type : this.renderer_type + 1;
        if (this.renderer_type > 5) {
          this.renderer_type = 0;
        }
        this.clear();
        _ref = this.fuyos;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          fuyo = _ref[_i];
          fuyo.set_renderer(this.renderer_type);
        }
        this.afterimage_mode = this.renderer_type === 0 ? true : false;
        if ((0 < (_ref1 = this.renderer_type) && _ref1 < 5)) {
          this.fuyos[1].set_visible(false);
          return this.fuyos[0].set_visible(false);
        } else {
          this.fuyos[1].set_visible(true);
          return this.fuyos[0].set_visible(true);
        }
      };

      Main.prototype.setup_update = function() {
        this.timeoutID = null;
        this.last_time = Date.now();
        return this.update();
      };

      Main.prototype.update = function() {
        var delta, fuyo, now_time, _i, _len, _ref,
          _this = this;
        if (this.timeoutID !== null) {
          return;
        }
        now_time = Date.now();
        delta = now_time - this.last_time;
        this.clear();
        _ref = this.fuyos;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          fuyo = _ref[_i];
          fuyo.update(delta);
        }
        this.timeoutID = setTimeout(function() {
          _this.timeoutID = null;
          return _this.update();
        }, 1000 / FPS);
        return this.last_time = now_time;
      };

      Main.prototype.clear = function() {
        if (this.afterimage_mode) {
          ctx.globalCompositeOperation = "source-over";
          ctx.fillStyle = "rgba(0,0,0,0.05)";
          return ctx.fillRect(0, 0, cvs_W, cvs_H);
        } else {
          return ctx.clearRect(0, 0, cvs_W, cvs_H);
        }
      };

      return Main;

    })();
    Fuyo = (function() {

      function Fuyo(color) {
        var i, _i, _ref;
        this.color = color;
        _this.draw_type_5 = __bind(_this.draw_type_5, this);

        _this.draw_type_4 = __bind(_this.draw_type_4, this);

        _this.draw_type_3 = __bind(_this.draw_type_3, this);

        _this.draw_type_2 = __bind(_this.draw_type_2, this);

        _this.draw_type_1 = __bind(_this.draw_type_1, this);

        _this.draw_type_0 = __bind(_this.draw_type_0, this);

        _this.set_visible = __bind(_this.set_visible, this);

        _this.set_renderer = __bind(_this.set_renderer, this);

        _this.update = __bind(_this.update, this);

        this.points = new Array(POINT_NUM);
        for (i = _i = 0, _ref = this.points.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          this.points[i] = new Point();
        }
        this.set_visible(true);
      }

      Fuyo.prototype.update = function(d) {
        var point, _i, _len, _ref;
        _ref = this.points;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          point = _ref[_i];
          point.update(d);
        }
        if (this.visible) {
          return this.renderer();
        }
      };

      Fuyo.prototype.set_renderer = function(type) {
        return this.renderer = this["draw_type_" + type];
      };

      Fuyo.prototype.set_visible = function(value) {
        return this.visible = value;
      };

      Fuyo.prototype.draw_type_0 = function() {
        var first, i, max, next, point, _i, _ref;
        ctx.globalCompositeOperation = "lighter";
        ctx.fillStyle = this.color;
        ctx.beginPath();
        for (i = _i = 0, _ref = (max = this.points.length); 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          if (i === 0) {
            first = central2d(this.points[max - 1], this.points[0]);
            ctx.moveTo(first.x, first.y);
          }
          point = this.points[i];
          next = central2d(point, this.points[(i + 1) < max ? i + 1 : 0]);
          ctx.quadraticCurveTo(point.x, point.y, next.x, next.y);
        }
        return ctx.fill();
      };

      Fuyo.prototype.draw_type_1 = function() {
        var point, _i, _len, _ref, _results;
        ctx.globalCompositeOperation = "source-over";
        ctx.fillStyle = "rgba(255,255,255,0.7)";
        _ref = this.points;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          point = _ref[_i];
          ctx.beginPath();
          ctx.arc(point.x, point.y, 5, 360, true);
          _results.push(ctx.fill());
        }
        return _results;
      };

      Fuyo.prototype.draw_type_2 = function() {
        var i, max, point, _i, _j, _k, _len, _ref, _ref1, _ref2;
        ctx.globalCompositeOperation = "source-over";
        ctx.fillStyle = "yellow";
        for (i = _i = 0, _ref = (max = this.points.length); 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          ctx.beginPath();
          point = this.points[i];
          central = central2d(point, this.points[(i + 1) < max ? i + 1 : 0]);
          ctx.arc(central.x, central.y, 4, 360, false);
          ctx.fill();
        }
        ctx.fillStyle = "rgba(255,255,255,0.5)";
        _ref1 = this.points;
        for (_j = 0, _len = _ref1.length; _j < _len; _j++) {
          point = _ref1[_j];
          ctx.beginPath();
          ctx.arc(point.x, point.y, 5, 360, true);
          ctx.fill();
        }
        ctx.strokeStyle = "rgba(255,255,255,0.2)";
        ctx.beginPath();
        for (i = _k = 0, _ref2 = (max = this.points.length); 0 <= _ref2 ? _k < _ref2 : _k > _ref2; i = 0 <= _ref2 ? ++_k : --_k) {
          point = this.points[i];
          if (i === 0) {
            ctx.moveTo(point.x, point.y);
          } else {
            ctx.lineTo(point.x, point.y);
          }
        }
        ctx.closePath();
        return ctx.stroke();
      };

      Fuyo.prototype.draw_type_3 = function() {
        var first, i, max, next, point, _i, _j, _k, _l, _len, _ref, _ref1, _ref2, _ref3;
        ctx.globalCompositeOperation = "source-over";
        ctx.fillStyle = "yellow";
        for (i = _i = 0, _ref = (max = this.points.length); 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          ctx.beginPath();
          point = this.points[i];
          central = central2d(point, this.points[(i + 1) < max ? i + 1 : 0]);
          ctx.arc(central.x, central.y, 4, 360, false);
          ctx.fill();
        }
        ctx.fillStyle = "rgba(255,255,255,0.5)";
        _ref1 = this.points;
        for (_j = 0, _len = _ref1.length; _j < _len; _j++) {
          point = _ref1[_j];
          ctx.beginPath();
          ctx.arc(point.x, point.y, 5, 360, true);
          ctx.fill();
        }
        ctx.strokeStyle = "rgba(255,255,255,0.2)";
        ctx.beginPath();
        for (i = _k = 0, _ref2 = (max = this.points.length); 0 <= _ref2 ? _k < _ref2 : _k > _ref2; i = 0 <= _ref2 ? ++_k : --_k) {
          point = this.points[i];
          if (i === 0) {
            ctx.moveTo(point.x, point.y);
          } else {
            ctx.lineTo(point.x, point.y);
          }
        }
        ctx.closePath();
        ctx.stroke();
        ctx.strokeStyle = "yellow";
        ctx.lineWidth = 2;
        ctx.beginPath();
        for (i = _l = 0, _ref3 = (max = this.points.length); 0 <= _ref3 ? _l < _ref3 : _l > _ref3; i = 0 <= _ref3 ? ++_l : --_l) {
          if (i === 0) {
            first = central2d(this.points[max - 1], this.points[0]);
            ctx.moveTo(first.x, first.y);
          }
          point = this.points[i];
          next = central2d(point, this.points[(i + 1) < max ? i + 1 : 0]);
          ctx.quadraticCurveTo(point.x, point.y, next.x, next.y);
        }
        return ctx.stroke();
      };

      Fuyo.prototype.draw_type_4 = function() {
        var first, i, max, next, point, _i, _ref;
        ctx.globalCompositeOperation = "source-over";
        ctx.fillStyle = this.color;
        ctx.beginPath();
        for (i = _i = 0, _ref = (max = this.points.length); 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          if (i === 0) {
            first = central2d(this.points[max - 1], this.points[0]);
            ctx.moveTo(first.x, first.y);
          }
          point = this.points[i];
          next = central2d(point, this.points[(i + 1) < max ? i + 1 : 0]);
          ctx.quadraticCurveTo(point.x, point.y, next.x, next.y);
        }
        return ctx.fill();
      };

      Fuyo.prototype.draw_type_5 = function() {
        return this.draw_type_0();
      };

      return Fuyo;

    })();
    Point = (function() {

      function Point(x, y) {
        this.x = x != null ? x : cvs_W / 2;
        this.y = y != null ? y : cvs_H / 2;
        _this.update = __bind(_this.update, this);

        this.speed = POINT_SPEED;
        this.angle = clamp(0, Math.PI * 2);
        this.speed_X = Math.cos(this.angle) * this.speed;
        this.speed_Y = Math.sin(this.angle) * this.speed;
      }

      Point.prototype.update = function(d) {
        var x, y;
        this.x = x = this.x + (this.speed_X * d);
        this.y = y = this.y + (this.speed_Y * d);
        if (x < 0) {
          this.x *= -1;
        }
        if (y < 0) {
          this.y *= -1;
        }
        if (cvs_W < x) {
          this.x = cvs_W - this.x + cvs_W;
        }
        if (cvs_H < y) {
          this.y = cvs_H - this.y + cvs_H;
        }
        if (x < 0 || cvs_W < x) {
          this.speed_X *= -1;
        }
        if (y < 0 || cvs_H < y) {
          return this.speed_Y *= -1;
        }
      };

      return Point;

    })();
    return win.addEventListener("load", function() {
      return new Main();
    }, false);
  })(window, document);

}).call(this);
