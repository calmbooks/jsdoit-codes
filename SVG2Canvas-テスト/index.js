// Generated by CoffeeScript 1.4.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  (function(win, doc, exports) {
    var Main,
      _this = this;
    Main = (function() {

      function Main() {
        this.init = __bind(this.init, this);

      }

      Main.prototype.init = function() {
        var canvas, context, current_X, current_Y, num0, num1, num2, num3, path_array,
          _this = this;
        num0 = doc.querySelector("#test_svg path").getAttribute("d");
        num1 = num0.replace(" ", "");
        num2 = num1.replace(/([a-z]|[A-Z])/g, " $1");
        num3 = num2.replace(/([0-9])(-)/g, "$1,$2");
        path_array = num3.split(" ");
        canvas = doc.getElementById("stage");
        context = canvas.getContext("2d");
        current_X = 0;
        current_Y = 0;
        context.beginPath();
        path_array.forEach(function(line) {
          var cp1_X, cp1_Y, cp2_X, cp2_Y, num, nums, str;
          str = line.slice(0, 1);
          num = line.slice(1);
          nums = num.split(",");
          if (str === "m") {
            current_X += nums[0] - 0;
            current_Y += nums[1] - 0;
            return context.moveTo(current_X, current_Y);
          } else if (str === "M") {
            current_X = nums[0] - 0;
            current_Y = nums[1] - 0;
            return context.moveTo(current_X, current_Y);
          } else if (str === "l") {
            current_X += nums[0] - 0;
            current_Y += nums[1] - 0;
            return context.lineTo(current_X, current_Y);
          } else if (str === "L") {
            current_X = nums[0] - 0;
            current_Y = nums[1] - 0;
            return context.lineTo(current_X, current_Y);
          } else if (str === "h") {
            current_X += nums[0] - 0;
            return context.lineTo(current_X, current_Y);
          } else if (str === "H") {
            current_X = nums[0] - 0;
            return context.lineTo(current_X, current_Y);
          } else if (str === "v") {
            current_Y += nums[0] - 0;
            return context.lineTo(current_X, current_Y);
          } else if (str === "V") {
            current_Y = nums[0] - 0;
            return context.lineTo(current_X, current_Y);
          } else if (str === "c") {
            cp1_X = current_X + (nums[0] - 0);
            cp1_Y = current_Y + (nums[1] - 0);
            cp2_X = current_X + (nums[2] - 0);
            cp2_Y = current_Y + (nums[3] - 0);
            current_X += nums[4] - 0;
            current_Y += nums[5] - 0;
            return context.bezierCurveTo(cp1_X, cp1_Y, cp2_X, cp2_Y, current_X, current_Y);
          } else if (str === "C") {
            cp1_X = nums[0] - 0;
            cp1_Y = nums[1] - 0;
            cp2_X = nums[2] - 0;
            cp2_Y = nums[3] - 0;
            current_X = nums[4] - 0;
            current_Y = nums[5] - 0;
            return context.bezierCurveTo(cp1_X, cp1_Y, cp2_X, cp2_Y, current_X, current_Y);
          } else if (str === "z") {
            return context.closePath();
          }
        });
        context.closePath();
        context.fillStyle = "white";
        return context.fill();
      };

      return Main;

    })();
    return win.addEventListener("load", function() {
      var main;
      main = new Main();
      return main.init();
    }, false);
  })(window, document, window);

}).call(this);
