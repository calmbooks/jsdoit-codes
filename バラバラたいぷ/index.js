// Generated by CoffeeScript 1.4.0
(function() {
  var _this = this,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  (function(win, doc) {
    var $text_view, Main, RATIO, Texts, Utils;
    RATIO = 4;
    $text_view = $("#text_view");
    Utils = (function() {

      function Utils() {
        throw "Utils cant be instantiated.";
      }

      Utils.get_hsv_to_rgb = function(hsv) {
        var f, h, i, p, q, rgb, s, t, v;
        h = hsv.h;
        s = hsv.s;
        v = hsv.v;
        i = Math.floor(h / 60) % 6;
        f = (h / 60) - Math.floor(h / 60);
        p = Math.round(v * (1 - (s / 255)));
        q = Math.round(v * (1 - (s / 255) * f));
        t = Math.round(v * (1 - (s / 255) * (1 - f)));
        switch (i) {
          case 0:
            rgb = {
              r: v,
              g: t,
              b: p
            };
            break;
          case 1:
            rgb = {
              r: q,
              g: v,
              b: p
            };
            break;
          case 2:
            rgb = {
              r: p,
              g: v,
              b: t
            };
            break;
          case 3:
            rgb = {
              r: p,
              g: q,
              b: v
            };
            break;
          case 4:
            rgb = {
              r: t,
              g: p,
              b: v
            };
            break;
          case 5:
            rgb = {
              r: v,
              g: p,
              b: q
            };
        }
        return rgb;
      };

      Utils.clamp = function(min, max) {
        return Math.random() * (max - min) + min;
      };

      Utils.central = function(p1, p2) {
        return (p2 - p1) * 0.5 + p1;
      };

      Utils.central2d = function(p1, p2) {
        return {
          x: (p2.x - p1.x) * 0.5 + p1.x,
          y: (p2.y - p1.y) * 0.5 + p1.y
        };
      };

      Utils.round = function(num) {
        return Math.round(num * 10) / 10;
      };

      Utils.dtr = function(d) {
        return d * (Math.PI / 180);
      };

      Utils.rtd = function(r) {
        return r * (180 / Math.PI);
      };

      return Utils;

    }).call(_this);
    Main = (function() {

      function Main() {
        _this.set_input_attention = __bind(_this.set_input_attention, this);

        _this.set_dom_element = __bind(_this.set_dom_element, this);

        _this.set_key_event = __bind(_this.set_key_event, this);

        _this.init = __bind(_this.init, this);
        this.init();
      }

      Main.prototype.init = function() {
        this.set_key_event();
        return this.set_input_attention();
      };

      Main.prototype.set_key_event = function() {
        var barabara_handler, change_handler,
          _this = this;
        this.input_text = doc.getElementById("input_text");
        this.input_text.focus();
        change_handler = function() {
          return $text_view.html(_this.input_text.value).end();
        };
        barabara_handler = function() {
          var text, texts, _i, _len, _ref;
          texts = new Texts(_this.input_text.value, $text_view.width() * RATIO, $text_view.height() * RATIO);
          $text_view.css({
            width: $text_view.width(),
            height: $text_view.height()
          }).html("").end();
          _this.input_text.value = "";
          _ref = texts.trimming_groups;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            text = _ref[_i];
            _this.set_dom_element(text);
          }
          return $text_view.attr("style", "");
        };
        this.input_text.addEventListener("keyup", function(event) {
          if (event.keyCode === 13) {
            return barabara_handler();
          } else {
            return change_handler();
          }
        });
        this.input_text.addEventListener("focus", function(event) {
          return $text_view.removeClass("nofocus");
        });
        this.input_text.addEventListener("blur", function(event) {
          return $text_view.addClass("nofocus");
        });
        change_handler();
        return barabara_handler();
      };

      Main.prototype.set_dom_element = function(text) {
        var ctx, cvs, h, n, obj, output, row, w, _i, _j, _len, _len1, _ref;
        cvs = doc.createElement("canvas");
        ctx = cvs.getContext("2d");
        cvs.width = w = text.rect.w;
        cvs.height = h = text.rect.h;
        output = ctx.createImageData(w, h);
        _ref = text.pixels;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          row = _ref[_i];
          for (_j = 0, _len1 = row.length; _j < _len1; _j++) {
            obj = row[_j];
            n = (w * obj.y + obj.x) * 4;
            output.data[n] = 0;
            output.data[n + 1] = 0;
            output.data[n + 2] = 0;
            output.data[n + 3] = obj.s;
          }
        }
        ctx.putImageData(output, 0, 0);
        return $("<img />").attr("width", text.rect.w / RATIO).attr("src", cvs.toDataURL()).css({
          top: text.rect.y / RATIO,
          left: text.rect.x / RATIO
        }).appendTo($text_view).box2d({
          'y-velocity': 10,
          'shape': 'circle'
        }).end();
      };

      Main.prototype.set_input_attention = function() {
        var _this = this;
        return setInterval(function() {
          return $text_view.toggleClass("active");
        }, 500);
      };

      return Main;

    })();
    Texts = (function() {

      Texts.prototype.SIZE = 50 * RATIO;

      Texts.prototype.ALPHA_THRESHOLD = 200;

      function Texts(text, cvs_w, cvs_h) {
        this.text = text;
        this.cvs_w = cvs_w;
        this.cvs_h = cvs_h;
        _this.debug_output = __bind(_this.debug_output, this);

        _this.set_trimming = __bind(_this.set_trimming, this);

        _this.set_group = __bind(_this.set_group, this);

        _this.set_input_simplify = __bind(_this.set_input_simplify, this);

        _this.set_input = __bind(_this.set_input, this);

        _this.init = __bind(_this.init, this);

        this.init();
      }

      Texts.prototype.init = function() {
        this.input = this.set_input();
        this.simplify_input = this.set_input_simplify();
        this.groups = this.set_group();
        this.trimming_groups = this.set_trimming();
        return this.groups;
      };

      Texts.prototype.set_input = function() {
        var input_ctx, input_cvs, text;
        input_cvs = doc.createElement("canvas");
        input_ctx = input_cvs.getContext("2d");
        input_cvs.width = this.cvs_w;
        input_cvs.height = this.cvs_h;
        text = this.text;
        input_ctx.font = "bold " + this.SIZE + "px sans-serif";
        input_ctx.textAlign = "center";
        input_ctx.textBaseline = "middle";
        input_ctx.fillStyle = "black";
        input_ctx.fillText(text, this.cvs_w / 2, this.cvs_h / 2);
        return input_ctx.getImageData(0, 0, this.cvs_w, this.cvs_h);
      };

      Texts.prototype.set_input_simplify = function() {
        var alpha, b_c_s, b_w_data, h, height, i, j, m_l_s, m_r_s, m_w_data, simplify_input, t_c_s, t_w_data, temp_data, w, w_data, width, _i, _j, _k, _l, _m, _ref, _ref1, _ref2;
        temp_data = new Array();
        width = this.input.width;
        height = this.input.height;
        for (i = _i = 0, _ref = this.input.data.length; _i < _ref; i = _i += 4) {
          alpha = this.input.data[i + 3];
          temp_data.push(alpha > this.ALPHA_THRESHOLD ? alpha : 0);
        }
        simplify_input = new Array();
        for (i = _j = 0; 0 <= height ? _j < height : _j > height; i = 0 <= height ? ++_j : --_j) {
          w_data = new Array();
          h = i * width;
          for (j = _k = 0; 0 <= width ? _k < width : _k > width; j = 0 <= width ? ++_k : --_k) {
            w = h + j;
            w_data.push(temp_data[w]);
          }
          simplify_input.push(w_data);
        }
        for (h = _l = 0, _ref1 = simplify_input.length; 0 <= _ref1 ? _l < _ref1 : _l > _ref1; h = 0 <= _ref1 ? ++_l : --_l) {
          t_w_data = simplify_input[h - 1] || [];
          m_w_data = simplify_input[h];
          b_w_data = simplify_input[h + 1] || [];
          for (w = _m = 0, _ref2 = m_w_data.length; 0 <= _ref2 ? _m < _ref2 : _m > _ref2; w = 0 <= _ref2 ? ++_m : --_m) {
            t_c_s = t_w_data[w] || 0;
            b_c_s = b_w_data[w] || 0;
            m_l_s = m_w_data[w - 1] || 0;
            m_r_s = m_w_data[w + 1] || 0;
            if ((t_c_s === 0) && (b_c_s === 0)) {
              m_w_data[w] = 0;
            }
            if ((m_l_s === 0) && (m_r_s === 0)) {
              m_w_data[w] = 0;
            }
          }
        }
        return simplify_input;
      };

      Texts.prototype.set_group = function() {
        var connect_group_and_group, connect_group_and_w, create_temp_group, debug_count, groups, temp_groups,
          _this = this;
        debug_count = 0;
        create_temp_group = function(h, w_data) {
          var arr, before, current, group, max, w, _i, _ref;
          arr = new Array();
          for (w = _i = 0, _ref = (max = w_data.length); 0 <= _ref ? _i < _ref : _i > _ref; w = 0 <= _ref ? ++_i : --_i) {
            before = w_data[w - 1];
            current = w_data[w];
            if ((before === void 0 || before === 0) && current > 0) {
              group = new Array();
            }
            if (current > 0) {
              group.push({
                w: w,
                h: h,
                s: current
              });
            }
            if (before > 0 && current === 0) {
              arr.push(group);
            }
            if (w === (max - 1) && current > 0) {
              arr.push(group);
            }
          }
          return arr;
        };
        connect_group_and_w = function(groups, w_temp_group) {
          var before, current, delete_group_numbers, done_group, flag_add_brother, flag_connect, flag_done, group, i, j, last_w_group, n, _i, _j, _k, _l, _len, _len1, _ref, _ref1;
          done_group = null;
          flag_done = false;
          delete_group_numbers = new Array();
          for (i = _i = 0, _ref = groups.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
            group = groups[i];
            last_w_group = group[group.length - 1];
            flag_connect = false;
            flag_add_brother = false;
            if ((w_temp_group[0].h - last_w_group[0].h) > 1) {
              continue;
            }
            if (last_w_group[0].h === w_temp_group[0].h) {
              flag_add_brother = true;
              last_w_group = group[group.length - 2];
              if (last_w_group === void 0) {
                continue;
              }
            }
            for (_j = 0, _len = w_temp_group.length; _j < _len; _j++) {
              current = w_temp_group[_j];
              for (_k = 0, _len1 = last_w_group.length; _k < _len1; _k++) {
                before = last_w_group[_k];
                if (current.w === before.w) {
                  flag_connect = true;
                  break;
                }
              }
              if (flag_connect) {
                break;
              }
            }
            if (flag_connect && flag_done) {
              done_group = connect_group_and_group(done_group, group);
              delete_group_numbers.push(i);
            } else if (flag_connect) {
              if (flag_add_brother) {
                group[group.length - 1] = group[group.length - 1].concat(w_temp_group);
              } else {
                group.push(w_temp_group);
              }
              done_group = group;
              flag_done = true;
            }
          }
          for (j = _l = 0, _ref1 = delete_group_numbers.length; 0 <= _ref1 ? _l < _ref1 : _l > _ref1; j = 0 <= _ref1 ? ++_l : --_l) {
            n = delete_group_numbers[j] - j;
            groups.splice(n, 1);
          }
          return done_group;
        };
        connect_group_and_group = function(group_1, group_2) {
          var i, j, w_group_1, w_group_2, _i, _j, _ref, _ref1;
          for (i = _i = 0, _ref = group_1.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
            w_group_1 = group_1[i];
            for (j = _j = 0, _ref1 = group_2.length; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; j = 0 <= _ref1 ? ++_j : --_j) {
              w_group_2 = group_2[j];
              if (w_group_1[0].h === w_group_2[0].h) {
                group_1[i] = w_group_1.concat(w_group_2);
              }
            }
          }
          return group_1;
        };
        temp_groups = new Array();
        (function() {
          var h, temp_group, w_data, _i, _ref, _results;
          _results = [];
          for (h = _i = 0, _ref = _this.simplify_input.length; 0 <= _ref ? _i < _ref : _i > _ref; h = 0 <= _ref ? ++_i : --_i) {
            w_data = _this.simplify_input[h];
            temp_group = create_temp_group(h, w_data);
            _results.push(temp_groups.push(temp_group));
          }
          return _results;
        })();
        groups = new Array();
        (function() {
          var b_temp_groups, group, h, i, w_temp_group, w_temp_groups, _i, _ref, _results;
          _results = [];
          for (h = _i = 0, _ref = temp_groups.length; 0 <= _ref ? _i < _ref : _i > _ref; h = 0 <= _ref ? ++_i : --_i) {
            b_temp_groups = temp_groups[h - 1];
            w_temp_groups = temp_groups[h];
            _results.push((function() {
              var _j, _ref1, _results1;
              _results1 = [];
              for (i = _j = 0, _ref1 = w_temp_groups.length; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
                w_temp_group = w_temp_groups[i];
                debug_count += 1;
                if (b_temp_groups === void 0 || b_temp_groups.length === 0) {
                  group = new Array();
                  group.push(w_temp_group);
                  _results1.push(groups.push(group));
                } else {
                  group = connect_group_and_w(groups, w_temp_group);
                  if (group === null) {
                    group = new Array();
                    group.push(w_temp_group);
                    _results1.push(groups.push(group));
                  } else {
                    _results1.push(void 0);
                  }
                }
              }
              return _results1;
            })());
          }
          return _results;
        })();
        return groups;
      };

      Texts.prototype.set_trimming = function() {
        var group, obj, pixels, row, temp_max_x, temp_max_y, temp_min_x, temp_min_y, temp_row, trimming_groups, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _m, _ref;
        trimming_groups = new Array();
        _ref = this.groups;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          group = _ref[_i];
          temp_min_x = null;
          temp_max_x = null;
          temp_min_y = null;
          temp_max_y = null;
          for (_j = 0, _len1 = group.length; _j < _len1; _j++) {
            row = group[_j];
            for (_k = 0, _len2 = row.length; _k < _len2; _k++) {
              obj = row[_k];
              temp_min_x = Math.min(obj.w, temp_min_x) || obj.w;
              temp_max_x = Math.max(obj.w, temp_max_x) || obj.w;
              temp_min_y = Math.min(obj.h, temp_min_y) || obj.h;
              temp_max_y = Math.max(obj.h, temp_max_y) || obj.h;
            }
          }
          pixels = new Array();
          for (_l = 0, _len3 = group.length; _l < _len3; _l++) {
            row = group[_l];
            temp_row = new Array();
            for (_m = 0, _len4 = row.length; _m < _len4; _m++) {
              obj = row[_m];
              temp_row.push({
                x: obj.w - temp_min_x,
                y: obj.h - temp_min_y,
                s: obj.s
              });
            }
            pixels.push(temp_row);
          }
          trimming_groups.push({
            rect: {
              x: temp_min_x,
              y: temp_min_y,
              w: temp_max_x - temp_min_x + 1,
              h: temp_max_y - temp_min_y + 1
            },
            pixels: pixels
          });
        }
        return trimming_groups;
      };

      Texts.prototype.debug_output = function(trimming_groups) {
        var color_hsv, group, n, obj, output, output_ctx, output_cvs, rgb, w_group, _i, _j, _k, _len, _len1, _len2, _ref;
        output_cvs = doc.getElementById("c");
        output_ctx = output_cvs.getContext("2d");
        output_cvs.width = this.cvs_w;
        output_cvs.height = this.cvs_h;
        color_hsv = {
          h: 0,
          s: 255,
          v: 255
        };
        output = output_ctx.createImageData(this.cvs_w, this.cvs_h);
        for (_i = 0, _len = trimming_groups.length; _i < _len; _i++) {
          group = trimming_groups[_i];
          rgb = Utils.get_hsv_to_rgb(color_hsv);
          _ref = group.pixels;
          for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
            w_group = _ref[_j];
            for (_k = 0, _len2 = w_group.length; _k < _len2; _k++) {
              obj = w_group[_k];
              n = (this.cvs_w * obj.y + obj.x) * 4;
              output.data[n] = rgb.r;
              output.data[n + 1] = rgb.g;
              output.data[n + 2] = rgb.b;
              output.data[n + 3] = obj.s;
            }
          }
          color_hsv.h += 45;
          if (color_hsv.h > 360) {
            color_hsv.h = 0;
          }
        }
        return output_ctx.putImageData(output, 0, 0);
      };

      return Texts;

    })();
    return win.addEventListener("load", function() {
      return new Main();
    }, false);
  })(window, document);

}).call(this);
