// Generated by CoffeeScript 1.4.0
(function() {
  var _this = this,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  (function(win, doc) {
    var Main, ctx, cvs, input_column, preview;
    preview = doc.getElementById("preview");
    input_column = doc.getElementById("input_column");
    cvs = doc.getElementById("c");
    ctx = cvs.getContext("2d");
    Main = (function() {

      function Main() {
        _this.set_input_column_value = __bind(_this.set_input_column_value, this);

        _this.set_download = __bind(_this.set_download, this);

        _this.render_image = __bind(_this.render_image, this);

        _this.set_preview = __bind(_this.set_preview, this);

        _this.set_drop_files = __bind(_this.set_drop_files, this);

        _this.set_events = __bind(_this.set_events, this);

        _this.init = __bind(_this.init, this);
        this.init();
      }

      Main.prototype.init = function() {
        this.images = new Array();
        this.colmun_n = null;
        return this.set_events();
      };

      Main.prototype.set_events = function() {
        var _this = this;
        preview.addEventListener("dragover", function(event) {
          return event.preventDefault();
        }, false);
        preview.addEventListener("drop", function(event) {
          var files;
          event.preventDefault();
          files = event.dataTransfer.files;
          return _this.set_drop_files(files);
        }, false);
        return input_column.addEventListener("change", function(event, event1, event2) {
          _this.colmun_n = event.target.valueAsNumber;
          _this.set_input_column_value();
          return _this.set_preview();
        });
      };

      Main.prototype.set_drop_files = function(files) {
        var file, load_count, reader, _i, _len, _results,
          _this = this;
        load_count = 0;
        _results = [];
        for (_i = 0, _len = files.length; _i < _len; _i++) {
          file = files[_i];
          reader = new FileReader();
          reader.addEventListener("load", function(event) {
            var image;
            image = new Image();
            image.src = event.target.result;
            _this.images.push(image);
            load_count += 1;
            if (load_count >= files.length) {
              return _this.set_preview(3);
            }
          }, false);
          _results.push(reader.readAsDataURL(file));
        }
        return _results;
      };

      Main.prototype.set_preview = function() {
        var image, image_max_h, image_max_w, _i, _len, _ref;
        this.images_n = this.images.length;
        if (this.images_n <= 0) {
          return;
        }
        if (this.colmun_n === null) {
          this.colmun_n = Math.ceil(Math.sqrt(this.images_n));
        }
        this.set_input_column_value();
        image_max_w = 0;
        image_max_h = 0;
        _ref = this.images;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          image = _ref[_i];
          image_max_w = Math.max(image.width, image_max_w);
          image_max_h = Math.max(image.height, image_max_h);
        }
        this.image_max_w = image_max_w;
        this.image_max_h = image_max_h;
        this.output_w = this.image_max_w * this.colmun_n;
        this.output_h = this.image_max_h * Math.ceil(this.images_n / this.colmun_n);
        cvs.width = this.output_w;
        cvs.height = this.output_h;
        cvs.style.display = "block";
        return this.render_image();
      };

      Main.prototype.render_image = function() {
        var i, image, x, y, _i, _ref;
        for (i = _i = 0, _ref = this.images.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          x = (i % this.colmun_n) * this.image_max_w;
          y = (i / this.colmun_n | 0) * this.image_max_h;
          image = this.images[i];
          ctx.drawImage(image, x, y);
        }
        return this.set_download();
      };

      Main.prototype.set_download = function() {
        var button;
        button = doc.getElementById("btn_download");
        button.setAttribute("class", "");
        return button.setAttribute("href", cvs.toDataURL());
      };

      Main.prototype.set_input_column_value = function() {
        input_column.setAttribute("max", this.images_n);
        return input_column.setAttribute("value", this.colmun_n);
      };

      return Main;

    })();
    return win.addEventListener("load", function() {
      return new Main();
    }, false);
  })(window, document);

}).call(this);
